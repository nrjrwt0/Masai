GIT Collab & Branching (IW)
User checked in: 03 Hrs : 36 Mins ago
GIT Collab & Branching (WE) Pending
Problem
Create a file and edit it in multiple folders and push from both the folders
Create multiple branches and push files to those branches and merge them to the main branch using pull requests









GIT Collab Submitted
Problem
Part-1
Create a repo on http://github.com with your github account with the name collab_test (NOTE: Tick the create Initialize this repository with a README)
Create two folders account_1 and account_2
Clone the collab_test repo to both account_1 and account_2 folders
Part-2
Create a folder called folder_1 in account_1/collab_test folder with the file file_1.txt with the content "User1 Folder1 File1"
Create a folder called folder_2 in account_2/collab_test folder with the file file_1.txt with the content "User2 Folder2 File1"
Sync the folder_1 in account_1/collab_testfolder to the online repo with the message "User 1 Folder 1"
Sync the folder_2 in account_2/collab_test folder to the online repo with the message "User 2 Folder 2"
Part-3
Create a file inside account_1/collab_test called name.txt with your FIRSTNAME - LASTNAME and push the changes to the online repo with the message "first last"
Sync the changes to the repo in account_2/collab_test and make sure that the file name.txt is available in the folder account_2/collab_test
Change the contents of the file inside account_2/collab_test to LASTNAME - FIRSTNAME and sync the changed file to the online repo with the message "last first"
Part-4
Create a file with the name masai.txt inside account_1/collab_test with the content mentioned below
HELLO MASAI
GIT SESSION
Sync the file to the online repo with the message "F1 U1"
Create a file with the name masai.txt inside account_2/collab_test with the content mentioned below
GIT SESSION
HELLO MASAI
Sync the file to the online repo with the message "F1 U2" keeping the changes made by the first user so the final file should look like how its mentioned below
HELLO MASAI 
GIT SESSION
Part-5
Create a file with the name linux.txt inside account_1/collab_test with the content mentioned below
LINUX
GIT
Sync the file to the online repo with the message "F2 U1"
Create a file with the name linux.txt inside account_2/collab_test with the content mentioned below
GIT
LINUX
Sync the file to the online repo with the message "F2 U2" keeping the changes made by the second user so the final file should look like how its mentioned below
GIT
LINUX
Part-6
Roll back the repo reverting the changes made during the Part-3 Step-3
Sync the rolled back changes to the online repo
Provide the link to your repo for submission









Hello Branching Pending
Problem
NOTE: Timestamp meaning current date and time in the format 2020-04-27 18:00
Part-1
Create a folder called branch-play
Navigate to branch-play folder
Initialize branch-play folder with an empty repository
Part-2
Create a file called start inside branch-play folder with the current timestamp
Commit the changes to git with the message "Start Time" (HINT: use git commit command)
Go to http://github.com and create a new repository called branch-play (NOTE: Don't tick the option Initialize this repository with a README)
Add the newly created repository as remote to git repo in branch-play folder
Sync the local commit to the remote repo
Part-3
Create a new branch called feature_1
Switch to the branch feature_1
Create a file called start_f1 with the current timestamp
Commit and sync the branch feature_1 branch to the remote repo
Part-4
Switch to the branch master
Create a new branch called bug_1
Switch to the branch bug_1
Create a file called start_b1 with the current timestamp
Commit and sync the branch bug_1 branch to the remote repo
Create a pull request to merge bug_1 to master and approve the pull request
Part-5
Switch to the branch feature_1
Create a file called end_f1 with the current timestamp
Commit and sync the branch feature_1 branch to the remote repo
Create a pull request to merge feature_1 to master and approve the pull request
Part-6
Switch to the branch master
Create a file called end with the current timestamp
Sync the file end to the remote repo master branch
Submission Image/Video Instructions
Screenshot of the commits for the master branch